// Generated from src/runtime/client.ts using
//   base64 -w0 src/runtime/client.ts
// Update alongside runtime changes to keep DOM tests in sync.

const CLIENT_RUNTIME_BASE64 =
  ""

let instance = 0;

export const nextClientRuntimeUrl = () =>
  `data:application/typescript;base64,${CLIENT_RUNTIME_BASE64}#${instance++}`;
