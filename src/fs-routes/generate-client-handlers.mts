import { mkdir, readdir, rm, writeFile } from "node:fs/promises";
import path from "node:path";

const CLIENT_FILE_PATTERN = /\.client\.(?:[cm]?ts|tsx|[cm]?js)$/i;
const IGNORED_DIRS = new Set(["node_modules", ".git", ".router", "dist", "build"]);

type DirEntry = {
  name: string;
  path: string;
  isDirectory: boolean;
};

const toPosix = (value: string): string => value.replaceAll(path.sep, "/");

const readEntries = async (dir: string): Promise<DirEntry[]> => {
  const items = await readdir(dir, { withFileTypes: true });
  return items
    .filter((entry) => !IGNORED_DIRS.has(entry.name))
    .map((entry) => ({
      name: entry.name,
      path: path.join(dir, entry.name),
      isDirectory: entry.isDirectory(),
    }));
};

const walk = async (root: string): Promise<string[]> => {
  const stack: DirEntry[] = [{ name: "", path: root, isDirectory: true }];
  const files: string[] = [];

  while (stack.length) {
    const current = stack.pop()!;
    if (!current.isDirectory) continue;
    const entries = await readEntries(current.path);
    for (const entry of entries) {
      if (entry.isDirectory) {
        stack.push(entry);
        continue;
      }
      files.push(entry.path);
    }
  }

  return files;
};

const ensureOutputDir = async (outputFile: string): Promise<void> => {
  const dir = path.dirname(outputFile);
  await mkdir(dir, { recursive: true });
};

const relativeImportPath = (fromDir: string, toFile: string): string => {
  const rel = toPosix(path.relative(fromDir, toFile));
  return rel.startsWith(".") ? rel : `./${rel}`;
};

export const generateClientHandlerTypes = async (appFolder: string): Promise<void> => {
  const normalizedApp = path.resolve(appFolder);
  const files = await walk(normalizedApp);

  const handlerFiles = files.filter((file) => CLIENT_FILE_PATTERN.test(file));

  const appRelative = toPosix(path.relative(process.cwd(), normalizedApp));
  const outputRoot = path.resolve("types", appRelative);

  await rm(outputRoot, { recursive: true, force: true });
  await rm(path.join(".router", "types", appFolder), { recursive: true, force: true });

  if (handlerFiles.length === 0) {
    return;
  }

  const banner = "// Auto-generated by generateClientHandlerTypes. Do not edit manually.";
  const suffixes = ["?url", "?url&no-inline"];

  for (const handlerAbs of handlerFiles) {
    const handlerRelative = toPosix(path.relative(normalizedApp, handlerAbs));
    const baseOutput = path.join(outputRoot, handlerRelative);

    for (const suffix of suffixes) {
      const outputFile = `${baseOutput}${suffix}.d.ts`;
      await ensureOutputDir(outputFile);

      const outputDir = path.dirname(outputFile);
      const handlerImportPath = relativeImportPath(outputDir, handlerAbs);

      const content = [
        banner,
        "",
        `import type { HandlerModule, HandlerAssert } from "@mewhhaha/ruwuter/events";`,
        `import type * as Mod from "${handlerImportPath}";`,
        `type Fn = HandlerAssert<Mod.default>;`,
        `declare const href: HandlerModule<Fn>;`,
        `export default href;`,
        "",
      ].join("\n");

      await writeFile(outputFile, content);
    }
  }
};
